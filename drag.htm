<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>resize</title>
</head>
<style>
* {
    -webkit-text-size-adjust: none;
}

.customize-overlay:hover,
.customize-overlay.active,
.customize-overlay[isactive],
.selected .customize-overlay {
    background: rgba(66, 185, 131, .2);
}

.customizing .customize-overlay>* {
    -webkit-transform: scale(1.428571428571429);
    transform: scale(1.428571428571429);
}

.customize-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100px;
    height: 100px;

    /*  width: 30vw;
    height: 30vw;*/
    z-index: 1;
    border-radius: 3px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    cursor: move;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    /*border: 1px solid transparent;*/
    border: 1px dashed #ccc;
    background: rgba(66, 185, 131, .1);
}

.customize-overlay.center {
    left: 0;
    right: 0;
    /*    left: 50%;
    top: 50%;*/
    /* transform: translate(-50%, -50%);*/

    /*margin-left: -15vw;
    margin-top: -15vw;*/
    /*transition: all 0.5s;*/
    /* margin-left: -50px;
    margin-top: -50px;*/
}



.content-wrapper,
.wrapper {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    position: relative;
}

.resize-handle {
    position: absolute;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #8cd6b5;
}


.resize-handle.bottom-right,
.resize-handle.top-left {
    cursor: nwse-resize;
}

.resize-handle.bottom,
.resize-handle.top {
    left: calc(50% - 6px);
    cursor: ns-resize;
}

.resize-handle.bottom-left,
.resize-handle.top-right {
    cursor: nesw-resize;
}

.resize-handle.left,
.resize-handle.right {
    top: calc(50% - 6px);
    cursor: ew-resize;
}

.resize-handle.bottom-left,
.resize-handle.left,
.resize-handle.top-left {
    left: -6px;
}

.resize-handle.bottom-right,
.resize-handle.right,
.resize-handle.top-right {
    right: -6px;
}

.resize-handle.top,
.resize-handle.top-left,
.resize-handle.top-right {
    top: -6px;
}

.resize-handle.bottom,
.resize-handle.bottom-left,
.resize-handle.bottom-right {
    bottom: -6px;
}

.btn-group {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;

}

.btn-group .btn {
    background: #dedede;
    padding: 0px 10px;
    font-size: 12px;
    height: 30px;
    line-height: 30px;
    cursor: pointer;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: v
}

.btn-group .btn:hover {
    background: #ccc;
}

.btn-group .btn .icon {
    flex-shrink: 0;
    width: 0;
    height: 0;
    border-width: 6px;
    border-style: solid;
    border-top-color: black;
    border-right-color: black;
    border-left-color: transparent;
    border-bottom-color: transparent;
    margin-right: -10px;
    display: none;
    border-top-color: #F5A623;
    border-right-color: #F5A623;
}

/*.btn-group .btn.rotate .icon {
    border-top-color: #F5A623;
    border-right-color: #F5A623;
}

.btn-group .btn.skew .icon {
    border-top-color: #88BFFF;
    border-right-color: #88BFFF;
}*/

.btn-group .btn[isactive] .icon {
    display: block;
}

.container {
    position: relative;
    background: #eee;
    width: 80vw;
    height: 80vh;
    overflow: hidden;
    outline: 1px solid #000;
}

.container[flex] {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    flex-wrap: wrap;
    /*    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;*/
}

.container[flex] .customize-overlay {
    position: inherit;
    margin: 0;
    left: 0;
    top: 0;
}

.grid {
    display: flex;
    flex-wrap: wrap;
}

.grid-cell {
    flex: 1;
    /*border: 1px dashed #ccc;*/
    outline: 1px solid #ccc;
}

/* With gutters */
.grid--gutters {
    margin: -1em 0 0 -1em;
}

.grid--gutters>.grid-cell {
    padding: 1em 0 0 1em;
}

/* Alignment per row */
.grid.grid-top {
    align-items: flex-start;
}

.grid.grid-middle {
    align-items: center;
}

.grid.grid-bottom {
    align-items: flex-end;
}

.grid.grid-stretch {
    align-items: stretch;
}

.grid.grid-baseline {
    align-items: baseline;
}

.grid.grid-left {
    justify-content: flex-start;
}

.grid.grid-center {
    justify-content: center;
}

.grid.grid-right {
    justify-content: flex-end;
}

.grid.grid-between {
    justify-content: space-between;
}

.grid.grid-around {
    justify-content: space-around;
}

.grid-cell.col-1 {
    flex: 0 0 8.33333%;
}

.grid-cell.col-2 {
    flex: 0 0 16.66667%;
}

.grid-cell.col-3 {
    flex: 0 0 25%;
}

.grid-cell.col-4 {
    flex: 0 0 33.33333%;
}

.grid-cell.col-5 {
    flex: 0 0 41.66667%;
}

.grid-cell.col-6 {
    flex: 0 0 50%;
}

.grid-cell.col-7 {
    flex: 0 0 58.33333%;
}

.grid-cell.col-8 {
    flex: 0 0 66.66667%;
}

.grid-cell.col-9 {
    flex: 0 0 75%;
}

.grid-cell.col-10 {
    flex: 0 0 83.33333%;
}

.grid-cell.col-11 {
    flex: 0 0 91.66667%;
}

.grid-cell.col-11 {
    flex: 0 0 100%;
}

/* Alignment per cell */
.grid-cell-top {
    align-self: flex-start;
}

.grid-cell-middle {
    align-self: center;
}

.grid-cell-bottom {
    align-self: flex-end;
}


/* Base classes for all media */
.grid--fit>.grid-cell {
    flex: 1;
}

.grid--full>.grid-cell {
    flex: 0 0 100%;
}

.grid--1of2>.grid-cell {
    flex: 0 0 50%
}

.grid--1of3>.grid-cell {
    flex: 0 0 33.3333%
}

.grid--1of4>.grid-cell {
    flex: 0 0 25%
}

/*
@media (min-width: 24em) {
  .small-grid--fit > .grid-cell {
    flex: 1;
  }
  .small-grid--full > .grid-cell {
    flex: 0 0 100%;
  }
  .small-grid--1of2 > .grid-cell {
    flex: 0 0 50%
  }
  .small-grid--1of3 > .grid-cell {
    flex: 0 0 33.3333%
  }
  .small-grid--1of4 > .grid-cell {
    flex: 0 0 25%
  }
}


@media (min-width: 48em) {
  .large-grid--fit > .grid-cell {
    flex: 1;
  }
  .large-grid--full > .grid-cell {
    flex: 0 0 100%;
  }
  .large-grid--1of2 > .grid-cell {
    flex: 0 0 50%
  }
  .large-grid--1of3 > .grid-cell {
    flex: 0 0 33.3333%
  }
  .large-grid--1of4 > .grid-cell {
    flex: 0 0 25%
  }
}*/

.main-and-sidebar-wrapper {
    display: flex;
    flex-direction: row;
}

.main {
    flex: 3;
    margin-right: 60px;
}

.sidebar {
    flex: 1;
}

.tableGrid {
    width: 100%;
    height: 100%;
    padding: 0;
    /*border-collapse: collapse;*/
    border-width: 0;
    border: 1px solid #000;
}

.tableGrid td {
    border: 1px solid #dedede;
    outline: 1px solid #dedede;
    border-width: 0;
    padding: 0;
    margin: 0;
}

.overlay-id {
    width: 15px;
    height: 15px;
    border-radius: 50%;
    border: 1px solid #ccc;
    text-align: center;

    line-height: 15px;
    background: #fff;
    font-size: 12px;

}

.close {
    background: #fff;
    color: #000;
    border-radius: 50%;
    line-height: 15px;
    text-align: center;
    height: 15px;
    width: 15px;
    font-size: 12px;
    padding: 1px;
    top: 5px;
    right: 5px;
    position: absolute;
    cursor: pointer;
}

.close:hover {
    background: #ccc;
}

/* use cross as close button */
.close::before {
    content: "\2716";
}

.selected {
    background: #fff;
    color: #000;
    border-radius: 50%;
    line-height: 15px;
    text-align: center;
    height: 15px;
    width: 15px;
    font-size: 12px;
    padding: 1px;
    top: 5px;
    right: 25px;
    position: absolute;
}

.selected::before {
    content: "\2714";
}

blockquote::before {
    content: open-quote;
    position: absolute;
    z-index: -1;
    color: #DDD;
    font-size: 120px;
    font-family: serif;
    font-weight: bolder;
}

.customize-overlay::before {
    content: "\2605";
    position: absolute;
    z-index: -1;
    font-size: 50px;
    font-family: serif;
    font-weight: bolder;
    color: rgba(66, 185, 131, .3);
}
</style>

<body>
    <div class="btn-group">
        <div class="btn add">add <div class="icon"></div>
        </div>
        <div class="btn sort">sort
            <div class="icon"></div>
        </div>
        <div class="btn rotate">rotate
            <div class="icon"></div>
        </div>
        <div class="btn skew">skew
            <div class="icon"></div>
        </div>
    </div>
    <div class="container">
    </div>
   
    <script>
    'use strict';
    //定义类属性    方法不允许枚举
    var createClass = function() {
        function defineProperties(target, props) {
            for (var key in props) {
                if (target.hasOwnProperty(key)) {
                    console.log(_.type(target) + " hasOwnProperty " + key)
                } else {
                    //不覆盖已有属性
                    var descriptor = {
                        key: key,
                        value: props[key],
                        enumerable: false,
                        configurable: true,
                        writable: true
                    }
                    Object.defineProperty(target, key, descriptor);
                }
            }
        }
        return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    //位置信息
    var posinfo = function() {
        function Posinfo(el, limited) {
            if (!(this instanceof Posinfo)) return new Posinfo(el, limited);
            if (!el) {
                console.log("el is null")
                return false
            }
            var self = this;
            ["width", "height", "top", "left"].forEach(function(t) {
                self[t] = parseFloat(self.getStyle(el, t))
            });

            this["minTop"] = -1 * parseFloat(this.getStyle(el, "margin-top"));
            this["minLeft"] = -1 * parseFloat(this.getStyle(el, "margin-left"));
            if (limited) {
                //     // x: document.documentElement.clientWidth,
                //     // y: document.documentElement.clientHeight
                this["maxTop"] = limited.height - this.height + this.minTop;
                this["maxLeft"] = limited.width - this.width + this.minLeft;
            }
        }

        return createClass(Posinfo, {
            getStyle: function(el, attr) {
                return window.getComputedStyle ? window.getComputedStyle(el, null)[attr] : el.currentStyle[attr]
            },
            // getMatrix: function(el) {
            //     var matrix = this.getStyle(el, "transform")
            //     // var str = 'matrix(1, 0, 0, 1, -72.6667, -72.6667)'
            //     var matrixReg = /^matrix\((.*?)\)$/
            //     var m = matrix.replace(matrixReg, function(all, m) { return m }).split(',').map(function(t) { return parseFloat(t) })
            //     return m
            // },

        })
    }();

    var dragger = function() {
        function Dragger(options) {
            if (!(this instanceof Dragger)) return new Dragger(options);
            this.btns = document.querySelectorAll(".btn");
            this.btnGroup = document.querySelector(".btn-group")
            this.container = document.querySelector(".container")
            this.limited = posinfo(this.container)
            this.id = 0;
            this.setup();
        }

        return createClass(Dragger, {
            creatGrid: function() {
                var frag = document.createDocumentFragment()
                var grid = document.createElement("div");
                grid.className = "grid"
                for (var i = 0; i < 200; i++) {
                    var div = document.createElement("div");
                    div.className = "grid-cell col-1";
                    div.style.height = '30px'
                    grid.appendChild(div);
                }
                frag.appendChild(grid)
                this.container.appendChild(frag)

                var cell = document.querySelector(".grid-cell")
                this.block = cell ? posinfo(cell) : {
                    width: 100,
                    height: 100
                }
            },
            createTableGrid: function(n, m) {
                var frag = document.createDocumentFragment()
                var table = document.createElement("table");
                table.className = "tableGrid"
                table.setAttribute("cellspacing", "0")
                table.setAttribute("cellpadding", "0")
                table.setAttribute("border", "0")
                var n = n || 12,
                    m = m || 12;
                for (var i = 0; i < n; i++) {
                    var tr = document.createElement("tr");
                    for (var j = 0; j < m; j++) {
                        var td = document.createElement("td");
                        tr.appendChild(td)
                    }
                    table.appendChild(tr)
                }
                frag.appendChild(table)
                this.container.appendChild(frag)

                var cell = document.querySelector(".tableGrid td")
                this.block = cell ? {
                    width: this.getWidth(cell),
                    height: this.getHeight(cell)
                } : {
                    width: 100,
                    height: 100
                }

            },
            createOverlay: function() {
                var frag = document.createDocumentFragment()
                var overlay = document.createElement("div"); // blockquote
                overlay.id = "overlay_" + this.id++;
                // <span class="close"></span>
                var close = document.createElement("span");
                close.className = "close"
                overlay.appendChild(close);

                // var selected = document.createElement("span");
                // selected.className = "selected"
                // overlay.appendChild(selected);

                var idText = document.createElement("div");
                idText.className = "overlay-id"
                idText.innerText = this.id
                overlay.appendChild(idText);

                overlay.className = "customize-overlay center";
                overlay.style.width = 3 * this.block.width + "px";
                overlay.style.height = 3 * this.block.height + "px";
                ['top', 'right', 'bottom', 'left', 'top-left', 'top-right', 'bottom-left', 'bottom-right'].forEach(function(t) {
                    var div = document.createElement("div");
                    div.className = "resize-handle " + t;
                    overlay.appendChild(div);
                })
                frag.appendChild(overlay)
                this.container.appendChild(frag)
            },
            sortOverlay: function() {
                if (this.container.hasAttribute("flex")) {
                    this.container.removeAttribute("flex")
                } else {
                    this.container.setAttribute("flex", "")
                }
            },

            computed: function(el, e, act) {
                this.pos = posinfo(el, this.limited)
                // this._matrix = this.getMatrix(el);
                // this._ma = this._matrix[0];
                // this._md = this._matrix[3];
                // this._me = this._matrix[4];
                // this._mf = this._matrix[5];
                if (e) {
                    e.preventDefault();
                    this.x = e.clientX;
                    this.y = e.clientY;
                }

                if (act) {
                    this._act = act;
                } else {
                    this._act = ""
                }
                // console.log(this._matrix)
                // console.log("_width:" + this._width)
                // console.log("_height:" + this._height)
                // console.log("_top" + this._top)
                // console.log("_left" + this._left)
                // console.log(this._act)

            },
            addEvent: function(el, type, listener) {
                if (window.addEventListener) {
                    el.addEventListener(type, listener, false);
                } else {
                    el.attachEvent('on' + type, listener);
                }
            },

            translate: function(el, x, y) {
                //"translate3d(" + offx + "px," + offy + "px,0)";
                // el.style.webkitTransform = "matrix(1,0,0,1," + x + "," + y + ")";
                el.style.webkitTransform = "matrix(" + this._ma + ",0,0," + this._md + "," + x + this._me + "," + y + this._mf + ")";
            },
            scale: function(el, sx, sy) {
                // el.style.webkitTransform = "matrix(" + sx + ",0,0," + sy + ",0,0)";
                el.style.webkitTransform = "matrix(" + sx + ",0,0," + sy + "," + this._me + "," + this._mf + ")";
            },
            rotate: function(el, x, y) {
                el.style.webkitTransform = "rotate(" + (Math.atan2(y, x) * 180 / Math.PI) + "deg)"
            },
            skew: function(el, x, y) {
                el.style.webkitTransform = "skew(0," + (Math.atan2(y, x) * 180 / Math.PI) + "deg)"
            },
            drag: function(el, x, y) {
                el.style.left = Math.max(Math.min(x + this.pos.left, this.pos.maxLeft), this.pos.minLeft) + "px";
                el.style.top = Math.max(Math.min(y + this.pos.top, this.pos.maxTop), this.pos.minTop) + "px";
            },
            dragRight: function(el, x, y) {
                el.style.width = Math.min(this.pos.width + x, this.limited.width - this.pos.left + this.pos.minLeft) + "px"
            },
            dragLeft: function(el, x, y) {
                el.style.left = Math.max(this.pos.left + x, this.pos.minLeft) + "px"
                el.style.width = Math.min(this.pos.width - x, this.limited.width) + "px" //- _left - this.pos.width + x
            },
            dragBottom: function(el, x, y) {
                el.style.height = Math.min(this.pos.height + y, this.limited.height - this.pos.top + this.pos.minTop) + "px"
            },
            dragTop: function(el, x, y) {
                el.style.top = Math.max(this.pos.top + y, this.pos.minTop) + "px"
                el.style.height = this.pos.height - y + "px"
            },
            dragBottomRight: function(el, x, y) {
                this.dragRight(el, x, y)
                this.dragBottom(el, x, y)
            },
            dragBottomLeft: function(el, x, y) {
                this.dragLeft(el, x, y)
                this.dragBottom(el, x, y)
            },
            dragTopRight: function(el, x, y) {
                this.dragRight(el, x, y)
                this.dragTop(el, x, y)
            },
            dragTopLeft: function(el, x, y) {
                this.dragLeft(el, x, y)
                this.dragTop(el, x, y)
            },
            //吸附
            attract: function(el) {
                // el.style.top = parseInt(this.pos.top / this.block.height) * this.block.height + "px";
                // el.style.left = parseInt(this.pos.left / this.block.width) * this.block.width + "px";

                var halfWidth = this.block.width / 2
                var k = parseInt(this.pos.left / halfWidth)
                if (k % 2 === 0) {
                    el.style.left = k / 2 * this.block.width + "px";
                } else {
                    el.style.left = (k + 1) / 2 * this.block.width + "px";
                }

                var halfHeight = this.block.height / 2
                var n = parseInt(this.pos.top / halfHeight)

                if (n % 2 === 0) {
                    el.style.top = n / 2 * this.block.height + "px";
                } else {
                    el.style.top = (n + 1) / 2 * this.block.height + "px";
                }


                var attrRight = parseInt(this.pos.width / halfWidth);
                if (attrRight % 2 === 0) {
                    el.style.width = attrRight / 2 * this.block.width + "px";
                } else {
                    el.style.width = (attrRight + 1) / 2 * this.block.width + "px";
                }

                var attrBottom = parseInt(this.pos.height / halfHeight);
                if (attrBottom % 2 === 0) {
                    el.style.height = attrBottom / 2 * this.block.height + "px";
                } else {
                    el.style.height = (attrBottom + 1) / 2 * this.block.height + "px";
                }
            },
            setup: function() {
                var self = this;
                self.creatGrid();


                // self.createTableGrid();
                // this.computed();
                var btnClickHandle = function(e) {
                    var e = e || window.event;
                    var btn = e.target;
                    var value = btn.className.split(" ")[1];
                    switch (value) {
                        case "add":
                            self.createOverlay();
                            break;
                        case "sort":
                            self.sortOverlay();
                            // break;
                        default:
                            self.btns.forEach(function(t) {
                                if (t == btn) {
                                    if (t.getAttribute("isactive")) {
                                        t.removeAttribute("isactive")
                                        self._transform = ""
                                    } else {
                                        t.setAttribute("isactive", "true")
                                        self._transform = value
                                    }
                                } else {
                                    t.removeAttribute("isactive")
                                }
                            })
                            break;
                    }

                }


                this.addEvent(this.btnGroup, "click", btnClickHandle)
                //首字母大写
                var capitalize = function(word) {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                };
                //驼峰命名
                var camelCase = function(word) {
                    return "drag" + word.split("-").map(function(t) {
                        return capitalize(t)
                    }).join("")
                };
                var mapHandleName = function(className) {
                    return camelCase(className.split(" ")[1])
                }
                var closest = function(el, cls) {
                    if (!el.parentNode) { //document
                        return null
                    } else if (el.className.indexOf(cls) >= 0) {
                        return el;
                    } else {
                        return closest(el.parentNode, cls)
                    }
                }

                //操作开始
                var startHandle = function(e) {
                    var e = e || window.event;
                    var act = "drag",
                        target = e.target;
                    var overlay = closest(target, "customize-overlay");
                    if (target.className == "close") {
                        this.removeChild(overlay);
                        return false
                    } else if (target.className.indexOf("resize-handle") >= 0) {
                        act = mapHandleName(target.className)
                    }

                    if (overlay) {
                        overlay.setAttribute("isActive", "true");
                        self.el = overlay
                        self.computed(overlay, e, act);
                    }
                }
                self.addEvent(this.container, "mousedown", startHandle)

                document.onmousemove = function(e) {
                    var e = e || event
                    if (!self._act) return false;
                    var offx = e.clientX - self.x,
                        offy = e.clientY - self.y;

                    if (['drag', 'dragLeft', 'dragTop', 'dragRight', 'dragBottom'].indexOf(self._act) >= 0) {
                        self[self._act] && self[self._act](self.el, offx, offy);
                    } else {
                        if (self._transform) {
                            self[self._transform] && self[self._transform](self.el, offx, offy)
                        } else {
                            self[self._act] && self[self._act](self.el, offx, offy);
                        }
                    }

                }
                document.onmouseup = function(e) {
                    self._act = ""
                    var overlays = document.querySelectorAll(".customize-overlay")
                    overlays.forEach(function(t) {
                        if (t.hasAttribute("isActive")) {
                            self.computed(t)
                            console.log(self)
                            self.attract(t);
                            t.removeAttribute("isActive")
                        }

                    });
                }
                //todo 
                // el.addEventListener("touchstart", function(e) {
                //     console.log(e)
                //     var e = e || event;
                //     e.preventDefault();

                // }, false)

            }

        })

    }();

    console.log(dragger())
    </script>
</body>

</html>